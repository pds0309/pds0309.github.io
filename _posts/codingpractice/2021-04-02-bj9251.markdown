---
layout: post
title: 백준-9251-LCS (java)
date: 2021-04-02 11:15:10 +0900
category2: codingpractice
category: Study Note
tag: [백준 , dp]
---

## 백준-9251-LCS

---
### [문제설명링크   ](https://www.acmicpc.net/problem/9251)
<br>  
  
* [풀이](#나의-풀이)
* [코드](#자바-풀이-코드)  

<br>  

### 문제요약 

* 두 문자열이 주어졌을 때 모두의 부분 수열이 될 수 있는 수열 중 가장 긴 것을 찾는다.

<br>  


<br>
### 입력<br>
* 첫째 줄과 둘째 줄에 대문자 문자열 주어진다. 길이 <= 1000


### 출력  <br>   

* LCS 길이 출력



### 입력예시<br>  

ACAYKP<br>
CAPCAK<br>

### 출력예시<br>    

4
 


<br>

### 나의 풀이<br>  

* X * XYZ 를 X와 XYZ의 부분수열의 길이라고 한다면 ACAYKP 와 CAPCAK 에서
	* A * C : 0  
	* A * CA : 1 
	* A * CAP : 1
	* ....  : 1
		* AC * C : 1
		* AC * CA : 1
		* AC * CAP : 1
		* AC * CAPC : 2
		* ... : 2
			* ACA * C : 1
			* ACA * CA : 2
			* ACA * CAP : 2
* 왼쪽의 마지막 문자와 오른쪽의 추가되는 값이 같으면 각각의 이전 문자에 대한 최대값 + 1이다.  
	* ex) A**C** * C**A** 에서 C와 A가 다르기 때문에 길이의 최대값은 이전 값인 A * CA :  1 이거나 AC * C : 1 이다. 
	* ex) AC**A** * C**A** 에서 A와 A가 같기 때문에 길이의 최대값은 이전 값인 AC * C : 1 + 1  = 2 가 된다.
		 * 이전 문자에서 양쪽에  A라는 같은 값이 추가되는 것이다. 

<br>  
 	
 
### 자바 풀이 코드  

<br>
```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        char A[] = b.readLine().toCharArray();
        char B[] = b.readLine().toCharArray();
        int DP[][] = new int[A.length+1][B.length+1];

        for(int i = 1 ; i < A.length + 1 ; i ++){

            for(int j = 1 ; j < B.length + 1 ; j ++){
                if(A[i-1] == B[j-1]){
                    DP[i][j] = DP[i-1][j-1] + 1;
                }
                else{
                    DP[i][j] = Math.max(DP[i][j-1],DP[i-1][j]);
                }
            }
        }
        System.out.println(DP[A.length][B.length]);
    }
}

```


#### 체감 난이도 : 중<br>  
* 비슷한 문제를 풀어봐서 괜찮았다.