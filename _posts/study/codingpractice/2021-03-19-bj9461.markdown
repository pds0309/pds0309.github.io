---
layout: post
title: 백준-9461-파도반 수열 (java)
date: 2021-03-19 10:21:35 +0900
category: 111CP
tag: study
mytag: [백준 , dp]
---

## 백준-9461-파도반 수열

---
### [문제설명링크   ](https://www.acmicpc.net/problem/9461)
<br>  

### 문제
오른쪽 그림과 같이 삼각형이 나선 모양으로 놓여져 있다. <br>
첫 삼각형은 정삼각형으로 변의 길이는 1이다. 그 다음에는 다음과 같은 과정으로 정삼각형을 계속 추가한다. 나선에서 가장 긴 변의 길이를 k라 했을 때, 그 변에 길이가 k인 정삼각형을 추가한다.
<br>  

파도반 수열 P(N)은 나선에 있는 정삼각형의 변의 길이이다. P(1)부터 P(10)까지 첫 10개 숫자는 1, 1, 1, 2, 2, 3, 4, 5, 7, 9이다.
<br>  

N이 주어졌을 때, P(N)을 구하는 프로그램을 작성하시오.<br>  

![](/assets/img/9461.png)

<br>
### 제한사항
* 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. (1 ≤ N ≤ 100)

<br>
### 입력

2<br>
6<br>
12<br>
  

### 출력

3<br>
16


<br>

### 나의 풀이

* 1 1 1 2 2 3 4 5 7 9 12 16 21 28 37 49 ... 의 규칙을 가지고 있다.

* 1 1 1 2 2 에서 시작했을 때 deque = {1,1,1,2,2} 일 때 추가되어야 할 값은 deque.popFirst() + deque.getLast() <br>  
 ex) (N = 6) -> answer = 1 + 2 = 3 <br>  
 ex) (N = 16) -> answer = 49 + 16 = 65<br>
> 풀고 찾아보니 점화식이 dp[i] = dp[i-3] + dp[i-2] 라는 걸 알 수 있었다. 

* 입력받은 값들 중 max값 까지의 규칙을 구한다.<br>  


* 각 입력에 대해 결과 출력  

<br>


### 나의 자바 풀이 코드  

<br>
```java

import java.util.*;

public class Main {

    public static void main(String[] args){

        Scanner s = new Scanner(System.in);
        int len = s.nextInt();
        int arr[] = new int[len];
        for(int i = 0 ; i < arr.length; i ++){
            arr[i] = s.nextInt();
        }
        long max = Arrays.stream(arr).max().getAsInt();
	
// value 값이 Integer 범위를 초과할 수 있기 때문에 Long 으로 선언
        HashMap<Integer , Long> hs = new HashMap<>();
        hs.put(1,1l);
        hs.put(2,1l);
        hs.put(3,1l);
        hs.put(4,2l);
        hs.put(5,2l);
        int index = 1;
        for(int i = 6 ; i <= max; i ++){

            hs.put(i , (hs.get(index) + hs.get(Collections.max(hs.keySet()))));
            index++;
        }

        for(int i = 0 ; i < arr.length; i ++){
            System.out.println(hs.get(arr[i]));
        }
    }
}

```


#### 체감 난이도 : 하
* 규칙을 찾고 푸는 것 자체는 쉬웠다. 시간복잡도를 훨씬 줄일 수 있을 것이다.

![](/assets/img/9461_1.PNG)
