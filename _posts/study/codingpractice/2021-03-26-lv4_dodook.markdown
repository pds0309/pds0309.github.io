---
layout: post
title: 프로그래머스-lv4 도둑질 (java)
date: 2021-03-26 12:12:55 +0900
category: 111CP
tag: study
mytag: [프로그래머스 , dp , lv4]
---

## [프로그래머스] level 4 - 도둑질
---
### [문제설명링크   ](https://programmers.co.kr/learn/courses/30/lessons/42897)
<br>
### 요약
* 집의 가치에 대한 money 배열이 주어지고 배열의 첫부분과 끝부분은 인접한 원형 형태이다.
* 한 집을 털면 인접한 집은 털 수 없을 때 최대의 이득을 볼 수 있게 집을 털어라.


<br>
### 제한사항
* 이 마을에 있는 집은 3개 이상 1,000,000개 이하입니다.
* money 배열의 각 원소는 0 이상 1,000 이하인 정수입니다.

<br>


<br>
### 입출력 예시

| money | return |
|--------------|----|
|[1,2,3,1]|4|



<br>
### 나의 풀이

* 첫 번째 집을 먼저 털었다면 두번째 집과 마지막 집은 **반드시** 털 수 없다.
* (첫 번째 집을 털지 않는다면)두 번째 집을 먼저 털 수 있다면  마지막 집을 터는 것은 가능하다.
* 두 상황을 나누어서 풀기로 했다.  

<br>  

* 예시  
  
&nbsp; money = {1,4,25,32,64,5,1,7}  

* 배열 A[i] 는 i번 째 집까지 털었을 때 최대값이다.
* i번 째 집까지 털 예정일 때 i-1번을 털었다면 i번은 털 수 없다.<br>
 **(i-2번까지 털었을 때 + i번째 집의 가치)** 가 <br>**i-1번까지 털었을 때** 보다 작다면<br> 굳이 i번째 집을 털 필요가 없다. i번째 안털고 그 다음꺼 터는게 더이득이니까
	* 첫 번째 집을 털 때
		* A[] = {1,1} 
		* money[2] = 25 : A[1] = **1 < 26** = A[0] + money[2] = 1 + 25
			* A[] = {1,1,26}
		* money[3] = 32 : A[2] = **26 < 33** = A[1] + money[3] = 1 + 32
			* A[] = {1,1,26,33}
		* money[4] = 64 : A[3] = **33 < 90** = A[2] + money[4] = 26 + 64
			* A[] = {1,1,26,33,90}
		* money[5] = 5 : A[4] = **90 > 38** = A[3] + money[5] = 33 + 5
			* A[] = {1,1,26,33,90,90}
		* money[6] = 1 : A[5] = **90 < 91** = A[4] + money[6] = 90 + 1
			* A[] = {1,1,26,33,90,90,91}
	* 두 번째 집을 털 때
		* B[] = {0,4}
		* money[2] = 25 : B[1] = **4 < 25** = A[0] + money[2] = 0 + 25
			* B[] = {0,4,25}
		* money[3] = 32 : B[2] = **25 < 36** = A[1] + money[3] = 4 + 32
			* B[] = {0,4,25,36}
		* money[4] = 64 : B[3] = **36 < 89** = A[2] + money[4] = 25 + 64
			* B[] = {0,4,25,36,89}
		* money[5] = 5 :  B[4] = **89 > 41** = A[3] + money[5] = 36 + 5
			* B[] = {0,4,25,36,89,89}
		* money[6] = 1 : B[5] = **89 < 90** = A[4] + money[6] = 90 + 1
			* B[] = {0,4,25,36,89,89,90}
		* money[7] = 7 : B[6] = **90 < 96** = A[5] + money[7] = 89 + 7
			* B[] = {0,4,25,36,89,89,90,96}
	* 답 : max(A,B) = 96

<br>  

### 자바 풀이 코드  

```java

import java.util.Arrays;

class Solution {
    public int solution(int[] money) {
        int answer = 0;
        //첫번째를 선택 할 때
        int arr1[] = new int[money.length-1];
        arr1[0] = money[0];
        arr1[1] = money[0];
        //첫번째를 선택하지 않을 때
        int arr2[] = new int[money.length];
        arr2[0] = 0;
        arr2[1] = money[1];

        for(int i = 2 ; i < arr1.length; i ++){
            arr1[i] = Math.max(arr1[i-2]+money[i] , arr1[i-1]);
        }
        for(int i = 2; i <arr2.length; i ++){
            arr2[i] = Math.max(arr2[i-2] + money[i] , arr2[i-1]);
        }

        answer = Math.max(Arrays.stream(arr1).max().getAsInt() , Arrays.stream(arr2).max().getAsInt());
        return answer;
    }
```


		
<br>
#### 체감 난이도 :  중
* 하다보니 되었다.