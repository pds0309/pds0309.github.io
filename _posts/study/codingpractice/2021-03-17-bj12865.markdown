---
layout: post
title: 백준-12865-평범한배낭 (java)
date: 2021-03-17 10:01:54 +0900
category: 111CP
tag: study
mytag: [백준, dp]
---

## 백준-12865-평범한 배낭

---
### [문제설명링크   ](https://www.acmicpc.net/problem/12865)
<br>
### 요약
* 배낭 무게, 물품들의 무게와 가치가 주어졌을 때 배낭에 넣을 수 있는 물건의 최대의 가치를 리턴.


<br>
### 제한사항
*  N(1 ≤ N ≤ 100)
*  K(1 ≤ K ≤ 100,000)
* W(1 ≤ W ≤ 100,000)
* V(0 ≤ V ≤ 1,000)

<br>
### 입력

4 7  -> 물품의수 N  가방의 무게 K <br>
6 13 -> 물품의 무게 W  물품의 가치 V<br>
4 8<br>
3 6<br>
5 12<br>

### 출력

14


<br>

### 풀이

* 동적계획법 배낭문제이다.  


> K(가방무게) 길이의 가치에 대한 배열을 생성하고 입력 값 (W,V)들로 최댓값을 찾는다.  
여기서 K = 7  
  
> 배열을 뒤에서부터 입력받은 W(물품의 무게) 까지 순회하면서 값을 저장한다.  
배열을 A, i 의 범위가 K~W 라고할 떄 ( A[i-W] 의 가치 + V ) > A[i] 이면 A[i]에 해당 값을 저장한다.  
-> (A[i] < A[i-W]) A[i] = A[i-W]



<br>
> W : 6 &nbsp;&nbsp;&nbsp;&nbsp;  V : 13  
 
|무게:|0|1|2|3|4|5|6|7|
|-----|---|---|---|---|---|---|---|
|**가치:**|0|0|0|0|0|0|13|13|  

<br>

> W : 4   &nbsp;&nbsp;&nbsp;&nbsp;V : 8  
  
|무게:|0|1|2|3|4|5|6|7|
|-----|---|---|---|---|---|---|---|
|**가치:**|0|0|0|0|8|8|13|13|
  
<br>

> W : 3   &nbsp;&nbsp;&nbsp;&nbsp;V : 6  
위의 배열을 기준으로 i = 7 일 때 A[i] = 13  
현재 W = 3 V = 6 으로 (A[i] = 13) < (A[i-W] + V) = 8 + 6 = 14  
따라서 A[7] 은 14 로 대체된다. 


|무게:|0|1|2|3|4|5|6|7|
|-----|---|---|---|---|---|---|---|
|**가치:**|0|0|0|6|8|8|13|[14](#)|  

<br>  

> W : 5   &nbsp;&nbsp;&nbsp;&nbsp;V : 12  
  

|무게:|0|1|2|3|4|5|6|7|
|-----|---|---|---|---|---|---|---|
|**가치:**|0|0|0|6|8|[12](#)|13|14|  

<br>
  

### 자바 풀이 코드  

<br>
```java
import java.util.Scanner;
public class Main {
    public static void main(String[] args){
        Scanner s = new Scanner(System.in);
        int count = s.nextInt();
        int weight = s.nextInt();
        int W = 0;
        int V = 0;
        int res[] = new int[weight+1];
        int c = 0;
        while(c < count){
            W = s.nextInt();
            V = s.nextInt();
            for(int i = weight; i >= W; i --){
                if(res[i] < res[ i - W ] + V ){
                    res[i] = res[ i - W ] + V;
                }
            }
            c++;
        }
        System.out.println(res[weight]);
    }
}

```
<br>
