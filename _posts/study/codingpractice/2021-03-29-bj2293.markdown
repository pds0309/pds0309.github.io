---
layout: post
title: 백준-2293-동전1 (java)
date: 2021-03-29 10:05:00 +0900
category: 111CP
tag: study
mytag: [백준 , dp]
---

## 백준-2293-동전1 

---
### [문제설명링크   ](https://www.acmicpc.net/problem/2293)
<br>  
  
* [풀이](#나의-풀이)
* [코드](#자바-풀이-코드)  

<br>  

### 문제요약 

* 서로 가치가 다른 n개의 동전을 자유롭게 사용해 가치의 합 k를 얻는 경우의 수를 구하라.
* 순서는 상관없음.
  
   
<br>  

<br>

<br>
### 입력<br>
* 1 <= n <= 100
* 1 <= k <= 10000  
* 다음 줄에는 동전의 가치가 주어짐.  



### 출력  <br>  
* 경우의 수 출력 


### 입력예시<br>  

3 10<br>
1<br>
2<br>
5<br>

### 출력예시<br>  
  
10<br>
 



<br>

### 나의 풀이<br>  
  
* N개의 동전 중 1개만 사용할 때 2개만 사용할 때 ... ~ N개 사용할 때  1~k 를 구하는 경우의 수를 생각해보기로 했다.
* A[1,2,5] : 주어진 동전
* K : 구해야할 가치
* DP[A.length+1][K+1] :  ex) DP[2][5] : 2번째 동전까지 사용할 때 합으로 5를 만들 수 있는 모든 경우의 수  

<br>  

* **N = 1** 
	* ```java  
//     K :  0 1 2 3 4 5 6 7 8 9 10
A[1] = 1 :  1 1 1 1 1 1 1 1 1 1 1 
```

* **N = 2**
	* ```java  
//     K :  0 1 2 3 4 5 6 7 8 9 10
A[1] = 1 :  1 1 1 1 1 1 1 1 1 1 1 
A[2] = 2 :  1 1 2 2 3 3 4 4 5 5 6
```
* **N = 3**
	* ```java  
//     K :  0 1 2 3 4 5 6 7 8 9 10
A[1] = 1 :  1 1 1 1 1 1 1 1 1 1 1 
A[2] = 2 :  1 1 2 2 3 3 4 4 5 5 6
A[3] = 5 :  1 1 2 2 3 4 5 6 7 8 10
```  
	* DP[3][7] :( 3번째숫자까지 썼을 때 7을 만드는 모든 경우의 수) 을 예로 모든 경우의 수를 보면
		* [1,1,1,1,1,1,1]
		* [1,1,1,1,1,2]
		* [1,1,1,2,2]
		* [1,2,2,2]
		* [1,1,5]
		* [2,5]
	* 5가 들어간 부분을 제외하면  
		* [1,1,1,1,1,1,1]
		* [1,1,1,1,1,2]
		* [1,1,1,2,2]
		* [1,2,2,2]
		* [[1,1]](#) 
		* [[2]](#) 
	* 5를 뺀 파란부분이 2를 만들 때의 경우의 수이다.<br>

	* DP[3][10] 을 예로 모든 경우의 수를 보면
		* [1 * 10]
		* [1 * 8] , [2]
		* [1 * 6] , [2 * 2]
		* [1 * 4] , [2 * 3]
		* [1 * 2] , [2 * 4]
		* [2 * 5]
		* [1,1,1,1,1,5]
		* [1,1,1,2,5]
		* [1,2,2,5]
		* [5,5]
	* 5를 하나씩 빼보자
		* [1,1,1,1,1,1,1,1,1,1,1]
		* [1,1,1,1,1,1,1,1] , [2]
		* [1,1,1,1,1,1] , [2,2]
		* [1,1,1,1,] , [2,2,2]
		* [1,1] , [2,2,2,2]
		* [2,2,2,2,2]
		* [[1,1,1,1,1]](#)
		* [[1,1,1,2]](#)
		* [[1,2,2]](#)
		* [[5]](#)
	* 1,2,5 를 사용했을 때 5를 구하는 경우의 수들임을 알 수 있다.
	* 즉 1,2,5를 사용했을 때 합이 10인 경우의 수는
		* **{1,2} 를 사용했을 때 10을만드는 경우의 수** + <br>
**{1,2,5} 를 사용했을 때 10-5를 만드는 경우의 수** 임을 알 수 있다. 
<br>  

* 식
	* n : A[N] ( A[i] : i번째 동전의 가치 ) 
		* **DP[N][K] = DP[N-1][K] + DP[N][K-n]**  &nbsp; ( 단 n <= K )
	* 동전 1,2,5 를 사용하는데 합이 4인 경우의 수를 구할 때 동전5는 사용하지 못하니까 1,2를 사용했을 때 경우의 수와 같다.
		* **DP[N][K] = DP[N-1][K]** &nbsp; ( n > K ) 

 
  
<br>  
 
### 자바 풀이 코드  

<br>
```java
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(b.readLine());
//동전 수
        int len = Integer.parseInt(st.nextToken());
// 구해야 할 합
        int sum = Integer.parseInt(st.nextToken());
// 동전 가치 배열
        int coin[] = new int[len];
        for (int i = 0; i < len; i++) {
            coin[i] = Integer.parseInt(b.readLine());
        }
// len 개의 동전을 사용해서 sum 을 만드는 경우의 수에 대한 배열
        int dp[][] = new int[len + 1][sum + 1];
        dp[0][0] = 1;
        for (int i = 1; i < len + 1; i++) {
            dp[i][0] = 1;
            for (int j = 1; j < sum + 1; j++) {
// 식
                if (j >= coin[i - 1]) {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - coin[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        System.out.println(dp[len][sum]);
    }
}

```


#### 체감 난이도 : 중<br>  
* 식을 생각하는데 시간이 좀 걸렸다. 
