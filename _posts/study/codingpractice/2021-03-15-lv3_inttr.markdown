---
layout: post
title: 프로그래머스-lv3 정수삼각형 (java)
date: 2021-03-15 09:35:41 +0900
category: 111CP
tag: study
---

## [프로그래머스] level 3 - 정수삼각형

---
### [문제설명링크   ](https://programmers.co.kr/learn/courses/30/lessons/43105)
<br>
### 요약
* 높이 1~ 500 의 삼각형이 있다. 꼭대기에서 바닥까지 갈 때 **거쳐간 숫자의 합이 가장 큰 경우** 를 찾는다.
* 아래로 이동할 때 대각선 방향 한 칸 왼쪽 또는 오른쪽으로만 이동 가능

<br>
### 제한사항
* 삼각형의 높이는 1 이상 500 이하입니다.
* 삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.

<br>


<br>
### 입출력 예시

| triangle |result|
|------------------------------------------------|---|
|[[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]] &nbsp;&nbsp;&nbsp; |30|



<br>

### 나의 풀이

1. 삼각형 배열의 (맨위를 제외한) 위에서 맨 밑까지 가면서 해당 위치에 위쪽의 두 값 중 더 큰 값을 해당 위치 값과 더하여 할당한다.
	* 같은 높이의 배열에서 첫번째 값과 마지막 값은 위쪽의 값이 하나이기 때문에 위쪽 값을 그대로 해당 위치 값과 더하여 할당하고 최대값 할당 루프에서 제외한다.
	* 배열의 왼쪽 끝, 오른쪽 끝 값일 때 할당 식
		> triangle[i][0] += triangle[i-1][0];
            	> triangle[i][i] += triangle[i-1][i-1];  

	* 끝 값이 아닐 때 할당 식 -  (왼쪽끝 < j < 오른쪽끝)
		> triangle[i][j] += Math.max(triangle[i-1][j-1], triangle[i-1][j]);
2. 삼각형 맨 밑의 배열에서 최대값을 return 한다.

<br>

<br>
<br>
### 자바 풀이 코드
```java
import java.util.Arrays;

class Solution {
    public int solution(int[][] triangle) {
        int answer = triangle[0][0];
        int i = 1 ;
// 삼각형 높이에 대한 루프
        while(i < triangle.length){	
            triangle[i][0] += triangle[i-1][0];  //왼쪽 끝값 설정
            triangle[i][i] += triangle[i-1][i-1];  // 오른쪽 끝값 설정
// 같은 삼각형 높이에서의 값들에 대한 루프
            for(int j = 1; j < i  && i>=2; j ++){		
// 양쪽 끝값을 제외한 값 할당 (위 쪽의 두 값 중 큰 값 할당) 
                triangle[i][j] += Math.max(triangle[i-1][j-1], triangle[i-1][j]);        
            }
            i++;
        }
// 맨 밑 값들에서 최대값이 정답.
        answer = Arrays.stream(triangle[triangle.length-1]).max().getAsInt();	
        return answer;
    }
}
```

#### 체감 난이도 :  중하
* 어렵지 않은 방법으로 생각해서 어렵지 않게 풀었다. 
* 문제 태그 - 동적 프로그래밍
* 동적 계획법은 문제를 여러개의 하위 문제로 나누어 결합하여 최종 목적에 도달하는 방법이라고 하는데 그걸 염두하고 풀지는 않았지만 잘 보니 그렇게 푼 것 같다.
